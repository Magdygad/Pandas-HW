#Dependencies
import pandas as pd
import numpy as np
import json
import os
#import data
json_path = "purchase_data.json"
p_data_df = pd.read_json(json_path)
p_data_df.head()
#p_data_df.describe()
player_count=p_data_df["SN"].count()
#Purchasing Analysis (Total)
#Number of Unique items
unique_items= len(p_data_df["Item Name"].unique())
unique_items
#Average Purchase price
avg_purchase=p_data_df['Price'].mean()
avg_purchase#purchasing Analysis
#by Gender
#Male
male_df=p_data_df.loc[p_data_df["Gender"]=="Male"]
male_df.head()
male_pc=male_df["Item Name"].count()
print(f"male_pc:{male_pc}")
avg_pur_count_male=male_df["Price"].mean()
print(f"avg_pur_count_male:{avg_pur_count_male}")
total_Pur_value=male_df["Price"].sum()
print(f"total_Pur_value:{total_Pur_value}")
male_NP= np.std(avg_pur_count_male)
print(f"male_NP:{male_NP}")
#Total# of Purchases
total_purchases=p_data_df['Item Name'].count()
total_purchases
#Total Revenue
total_revenue=p_data_df['Price'].sum()
total_revenue
#Gender Demographics
#Count of Male players
male=p_data_df['Gender'].value_counts()['Male']
male
#percentage of Male players
male_percentage=(male/player_count)*100
male_percentage
#Gender Demographics
#Count of Female players
Female=p_data_df['Gender'].value_counts()['Female']
Female
#percentage of Female players
Female_percentage=(Female/player_count)*100
Female_percentage
#Age demographics
#Create the bins in which data will be held
bins= [0, 25, 50, 75, 100]
#create names of the four bins
age_bin_value = [0, 9, 14, 19, 24, 29, 34, 39, 44, 100]
age_bin_names = ['<10', '10-14', '15-19', '20-24', '25-29', '30-34', '35-39', '40-44', '45<']
p_data_df["Age Demographics"]= pd.cut(p_data_df["Age"], age_bin_value, labels=age_bin_names)
demographic_group = p_data_df.groupby("Age Demographics")
print(demographic_group["Item Name"].count())
print((demographic_group["Price"].mean()))
print((demographic_group["Price"].sum()))
#Gender Demographics
#Count of Other/Non-disclosed players
Non_disclosed=p_data_df['Gender'].value_counts()
Non_disclosed
other_ND= player_count- male-Female
other_ND
other_ND_Percentage=(other_ND/player_count)*100
other_ND_Percentage
#purchasing Analysis
#by Gender
#Male
male_df=p_data_df.loc[p_data_df["Gender"]=="Male"]
male_df.head()
male_pc=male_df["Item Name"].count()
print(f"male_pc:{male_pc}")
avg_pur_count_male=male_df["Price"].mean()
print(f"avg_pur_count_male:{avg_pur_count_male}")
total_Pur_value=male_df["Price"].sum()
print(f"total_Pur_value:{total_Pur_value}")
male_NP= np.std(avg_pur_count_male)
print(f"male_NP:{male_NP}")
#purchasing Analysis
#by Gender
#Female
Female_df=p_data_df.loc[p_data_df["Gender"]=="Female"]
Female_df.head()
Female_pc=Female_df["Item Name"].count()
print(f"Female_pc:{Female_pc}")
avg_pur_count_Female=Female_df["Price"].mean()
print(f"avg_pur_count_Female:{avg_pur_count_Female}")
total_Pur_value=Female_df["Price"].sum()
print(f"total_Pur_value:{total_Pur_value}")
Female_NP= np.std(avg_pur_count_Female)
print(f"Female_NP:{Female_NP}")
#Top Spenders
sn_price=p_data_df.groupby(["SN"])['Price'].sum()
sn_pur=p_data_df.groupby(["SN"])['Price'].count()
sn_users=p_data_df.groupby(["SN"])
avg_sn= sn_price/sn_pur
top_sn=pd.DataFrame({"Purchase Count": sn_pur, "Average Purchase Price":avg_sn, "Total Purchase Value":sn_price})
top_sn= top_sn.sort_values("Total Purchase Value", ascending=False)
top_sn= top_sn[["Purchase Count", "Average Purchase Price", "Total Purchase Value"]]
top_sn.reset_index(inplace=True)
top_sn.round(2)
top_sn.head()
# Identify the 5 most popular items by purchase count, then list (in a table):
# Item ID
# Item Name
# Purchase Count
# Item Price
# Total Purchase Value
by_itemid = p_data_df.groupby('Item ID')
pur_by_item = pd.DataFrame(by_itemid['Item ID'].count()) 
#counts occurance of item ID by grouping by item ID
pur_by_item.rename(columns = {"Item ID": "Number of Items Sold"}, inplace = True)
pur_by_item
ttlpchsvlu = pd.DataFrame(by_itemid['Price'].sum()) 
# sums Price grouped by item ID
ttlpchsvlu.rename(columns = {"Price": "Revenue"}, inplace =True)
no_dup_items = p_data_df.drop_duplicates('Item ID')
ttlpchsvlu
top5_pop = no_dup_items.merge(pur_by_item, left_on = "Item ID", right_index = True)
top5_pop = top5_pop.merge(ttlpchsvlu, left_on = "Item ID", right_index = True)
top5_pop = top5_pop[['Item ID', "Item Name", "Price", "Number of Items Sold", "Revenue"]]
top5_pop.sort_values("Number of Items Sold", ascending = False, inplace = True)
top5_pop = top5_pop.iloc[0:6][:] 
# Instead of top 5 did top six because 4 items had sales of 9 items each
top5_pop
# Identify the 5 most profitable items by total purchase value, then list (in a table):
# Item ID
# Item Name
# Purchase Count
# Item Price
# Total Purchase Value
top5_prof = no_dup_items.merge(pur_by_item, left_on = "Item ID", right_index = True)
top5_prof = top5_prof.merge(ttlpchsvlu, left_on = "Item ID", right_index = True)
top5_prof = top5_prof[['Item ID', "Item Name", "Number of Items Sold", "Price", "Revenue"]]
top5_prof.sort_values("Revenue", ascending = False, inplace = True)
top5_prof.head()



